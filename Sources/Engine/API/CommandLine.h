/* Copyright (c) 2025 Dreamy Cecil
This program is free software; you can redistribute it and/or modify
it under the terms of version 2 of the GNU General Public License as published by
the Free Software Foundation


This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License along
with this program; if not, write to the Free Software Foundation, Inc.,
51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */

#ifndef SE_INCL_API_COMMANDLINE_H
#define SE_INCL_API_COMMANDLINE_H

#ifdef PRAGMA_ONCE
  #pragma once
#endif

#include <unordered_map>

// Arguments in the command line
typedef CStaticStackArray<CTString> CommandLineArgs_t;

// Command callback prototype
// The command isn't executed if the amount of arguments ends up being less than defined by CommandLineFunction_t
typedef void (*FCommandLineCallback)(const CommandLineArgs_t &);

// Command callback with argument count (e.g. if expecting "+run MyMod 0" command, then the argument count is 2)
struct CommandLineFunction_t {
  FCommandLineCallback pFunc;
  INDEX ctArgs;

  __forceinline CommandLineFunction_t(FCommandLineCallback pSetFunc = NULL, INDEX ctSetArgs = -1) :
    pFunc(pSetFunc), ctArgs(ctSetArgs) {};
};

// Setup structure for command line arguments
struct ENGINE_API CommandLineSetup {
  public:
    // Callback functions associated with specific command names
    typedef std::unordered_map<CTString, CommandLineFunction_t> Commands_t;
    Commands_t mapCommands;

    // Function for passing initial program-specific arguments
    // e.g. "DedicatedServer.exe MyFragmatchGame MyMod" with 2 arguments
    CommandLineFunction_t pInitialArgs;

    // Fallback function for unknown options
    // Can be used in place of/in conjunction with 'pInitialArgs' when the program accepts variable amount of arguments
    typedef BOOL (*FUnknownCallback)(const CTString &);
    FUnknownCallback pUnknownOption;

    CTString strCommandLine; // Cached original command line
    CommandLineArgs_t aArgs; // Gathered command line arguments

  public:
    // Default constructor
    CommandLineSetup() : pInitialArgs(NULL, -1), pUnknownOption(NULL) {};

    // Constructor for C-like command line
    CommandLineSetup(int argc, char **argv);

    // Constructor for the entire command line
    CommandLineSetup(const char *strCmd);

  public:
    // Gather command line arguments from a C-like command line
    static void GetArguments(int argc, char **argv, CommandLineArgs_t &aArgs);

    // Gather command line arguments from the entire command line
    static void GetArguments(const char *strCmd, CommandLineArgs_t &aArgs);

    // Register new command callback
    inline void AddCommand(const CTString &strName, FCommandLineCallback pFunc, INDEX ctArguments) {
      ASSERT(ctArguments >= 0);
      mapCommands[strName] = CommandLineFunction_t(pFunc, ctArguments);
    };

    // Register initial arguments parser
    inline void AddInitialParser(FCommandLineCallback pFunc, INDEX ctArguments) {
      ASSERT(ctArguments > 0); // No point in processing initial arguments with no arguments
      pInitialArgs = CommandLineFunction_t(pFunc, ctArguments);
    };

    // Register unknown options handler
    inline void AddUnknownHandler(FUnknownCallback pFunc) {
      pUnknownOption = pFunc;
    };

    // Get amount of arguments in the command line (equal to argc - 1, i.e. excluding the executable)
    inline INDEX Count(void) const {
      return aArgs.Count();
    };

    // Accessor operator (equal to argv[i - 1])
    inline const CTString &operator[](INDEX i) const {
      return aArgs[i];
    };
};

// Parse command line according to the setup (can be done before initializing the engine)
ENGINE_API void SE_ParseCommandLine(const CommandLineSetup &cmd);

// Get output generated by the command line parser (e.g. for printing upon engine initialization)
ENGINE_API CTString &SE_CommandLineOutput(void);

#endif // include-once check
