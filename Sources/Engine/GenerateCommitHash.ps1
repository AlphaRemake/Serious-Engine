# Check if Git is usable
function Test-GitInstallation {
  try {
    git --version | Out-Null
    return $true
  } catch {
    return $false
  }
}

$gitFailed = $true

if (-not (Test-GitInstallation)) {
  Write-Output "GenerateCommitHash.ps1 - Git is not installed or not in PATH"

} else {
  # Get the current git branch name and the latest git commit hash
  try {
    $branchName = git rev-parse --abbrev-ref HEAD
    $commitHash = git rev-parse HEAD

    $gitFailed = $false

  } catch {
    Write-Output "GenerateCommitHash.ps1 - Git command failed: $_"
  }
}

# Dummy branch name and commit hash
if ($gitFailed) {
  $branchName = "main"
  $commitHash = "0000000000000000000000000000000000000000"
  Write-Output "GenerateCommitHash.ps1 - Using dummy values for the branch name and the commit hash"
}

# Get the current date and time
$currentDate = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss")

# Print everything into a header file
$outputFile = "CurrentCommitHash.h"

try {
@"
#ifndef SE_INCL_AUTOGENERATED_CURRENTCOMMITHASH_H
#define SE_INCL_AUTOGENERATED_CURRENTCOMMITHASH_H

// Auto-generated definitions of the current branch and the latest commit hash
#ifndef SE1_CURRENT_BRANCH_NAME
#define SE1_CURRENT_BRANCH_NAME "$branchName"
#endif
#ifndef SE1_CURRENT_COMMIT_HASH
#define SE1_CURRENT_COMMIT_HASH "$commitHash"
#endif
#ifndef SE1_BUILD_DATETIME
#define SE1_BUILD_DATETIME "$currentDate"
#endif

#endif // include-once check
"@ | Out-File -FilePath $outputFile

} catch {
  Write-Output 'GenerateCommitHash.ps1 - Cannot write "CurrentCommitHash.h" header file: $_'
  exit 1
}
